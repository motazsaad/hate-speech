{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HS | Language model |23/4/2021 | multi-dialect-bert-base-arabic ","provenance":[{"file_id":"1mwyOGZsoZeODQ1c8n34oiekc9byIcv4N","timestamp":1619191857227},{"file_id":"1P9iQHtUH5KUbTVtp8B4-AopZzEEPE0lw","timestamp":1618868148454}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"6dff160e574949b689479d16f876a27d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8322f40a098847428e07cc48d0d37e5c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_480e37fe9de1439db177749d1a6f16ba","IPY_MODEL_648a57577d2543b58d27cd56d9f086d9"]}},"8322f40a098847428e07cc48d0d37e5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"480e37fe9de1439db177749d1a6f16ba":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_94694e07fa824f4087c234b073e2a5fd","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":456,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":456,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a421820457f84264b5576bfcb0018f27"}},"648a57577d2543b58d27cd56d9f086d9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_f2eeb89f1b004fb49880be2d35f519aa","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 456/456 [00:00&lt;00:00, 6.81kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a493361df81e4e75b89fcc7622b4f5db"}},"94694e07fa824f4087c234b073e2a5fd":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"a421820457f84264b5576bfcb0018f27":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f2eeb89f1b004fb49880be2d35f519aa":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a493361df81e4e75b89fcc7622b4f5db":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e6643cfb93c24280981427747e5fa247":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_f1a7d72cdf32402698293446806fbe8c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_07fd43467251411fbe5d00ba4086b5fc","IPY_MODEL_cf23358cc0b74320a411d5eaab85ae31"]}},"f1a7d72cdf32402698293446806fbe8c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"07fd43467251411fbe5d00ba4086b5fc":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_019403338d984fb9a0fc683cc242cd85","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":334032,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":334032,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_453823edb60a4c93a585a8b56ddb3e6f"}},"cf23358cc0b74320a411d5eaab85ae31":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_3dcfc4f5e68c41959fff8090891cf341","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 334k/334k [00:00&lt;00:00, 2.10MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f2e6ccc916cd4645a82f1a42c07117c9"}},"019403338d984fb9a0fc683cc242cd85":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"453823edb60a4c93a585a8b56ddb3e6f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3dcfc4f5e68c41959fff8090891cf341":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f2e6ccc916cd4645a82f1a42c07117c9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"eec06cc2fad24d3283932ae6b43a37b1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_ebe4372ad07a413fad04b512aaf5ff71","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3a763620db544324b656c6ec811da0be","IPY_MODEL_e71ac9d717764c6dac1cec2bd99c2751"]}},"ebe4372ad07a413fad04b512aaf5ff71":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3a763620db544324b656c6ec811da0be":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_0bc5447dbe6e480d894d5e578bda0622","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":445015160,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":445015160,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b192804f3fdf4b4f9790f7c7f7b5332d"}},"e71ac9d717764c6dac1cec2bd99c2751":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_99b058e6e3e64262b8faa2d1b09b42f6","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 445M/445M [00:09&lt;00:00, 45.8MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_14caea1602a84f789effdb9d4c13585c"}},"0bc5447dbe6e480d894d5e578bda0622":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"b192804f3fdf4b4f9790f7c7f7b5332d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"99b058e6e3e64262b8faa2d1b09b42f6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"14caea1602a84f789effdb9d4c13585c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"g4mZ8KYblg-g"},"source":["#installing dependencies"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IbHOBNd4ETRD","executionInfo":{"status":"ok","timestamp":1619192211643,"user_tz":-180,"elapsed":62541,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"08bd3a84-4336-48e9-a16f-f2dcfa8914cd"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C4tlwQ8si_FI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619192219017,"user_tz":-180,"elapsed":4241,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"f150107a-7dbc-4411-9ac0-e7e09b72abc8"},"source":["import torch\n","\n","# If there's a GPU available...\n","if torch.cuda.is_available():    \n","\n","    # Tell PyTorch to use the GPU.    \n","    device = torch.device(\"cuda\")\n","\n","    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n","\n","    print('We will use the GPU:', torch.cuda.get_device_name(0))\n","    !nvidia-smi\n","\n","# If not...\n","else:\n","    print('No GPU available, using the CPU instead.')\n","    device = torch.device(\"cpu\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["There are 1 GPU(s) available.\n","We will use the GPU: Tesla T4\n","Fri Apr 23 15:36:57 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 465.19.01    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   39C    P8     9W /  70W |      3MiB / 15109MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"y024z5AnlTLz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619192238392,"user_tz":-180,"elapsed":17788,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"bb76443e-80a1-4798-d03a-47a201c4718b"},"source":["!pip install optuna==2.3.0\n","!pip install transformers==4.2.1\n","# !pip install farasapy\n","# !pip install pyarabic\n","!git clone https://huggingface.co/bashar-talafha/multi-dialect-bert-base-arabic"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting optuna==2.3.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/87/10/06b58f4120f26b603d905a594650440ea1fd74476b8b360dbf01e111469b/optuna-2.3.0.tar.gz (258kB)\n","\r\u001b[K     |█▎                              | 10kB 20.5MB/s eta 0:00:01\r\u001b[K     |██▌                             | 20kB 28.4MB/s eta 0:00:01\r\u001b[K     |███▉                            | 30kB 21.5MB/s eta 0:00:01\r\u001b[K     |█████                           | 40kB 24.2MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 51kB 25.2MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 61kB 18.5MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 71kB 19.4MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 81kB 20.7MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 92kB 19.2MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 102kB 19.3MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 112kB 19.3MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 122kB 19.3MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 133kB 19.3MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 143kB 19.3MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 153kB 19.3MB/s eta 0:00:01\r\u001b[K     |████████████████████▎           | 163kB 19.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████▌          | 174kB 19.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 184kB 19.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 194kB 19.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 204kB 19.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 215kB 19.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▉    | 225kB 19.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 235kB 19.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 245kB 19.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 256kB 19.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 266kB 19.3MB/s \n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from optuna==2.3.0) (1.0.1)\n","Collecting alembic\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/72/a4/97eb6273839655cac14947986fa7a5935350fcfd4fff872e9654264c82d8/alembic-1.5.8-py2.py3-none-any.whl (159kB)\n","\u001b[K     |████████████████████████████████| 163kB 52.1MB/s \n","\u001b[?25hRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from optuna==2.3.0) (20.9)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from optuna==2.3.0) (4.41.1)\n","Collecting cliff\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a2/d6/7d9acb68a77acd140be7fececb7f2701b2a29d2da9c54184cb8f93509590/cliff-3.7.0-py3-none-any.whl (80kB)\n","\u001b[K     |████████████████████████████████| 81kB 11.4MB/s \n","\u001b[?25hCollecting colorlog\n","  Downloading https://files.pythonhosted.org/packages/32/e6/e9ddc6fa1104fda718338b341e4b3dc31cd8039ab29e52fc73b508515361/colorlog-5.0.1-py2.py3-none-any.whl\n","Requirement already satisfied: scipy!=1.4.0 in /usr/local/lib/python3.7/dist-packages (from optuna==2.3.0) (1.4.1)\n","Requirement already satisfied: sqlalchemy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from optuna==2.3.0) (1.4.7)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from optuna==2.3.0) (1.19.5)\n","Collecting cmaes>=0.6.0\n","  Downloading https://files.pythonhosted.org/packages/01/1f/43b01223a0366171f474320c6e966c39a11587287f098a5f09809b45e05f/cmaes-0.8.2-py3-none-any.whl\n","Collecting python-editor>=0.3\n","  Downloading https://files.pythonhosted.org/packages/c6/d3/201fc3abe391bbae6606e6f1d598c15d367033332bd54352b12f35513717/python_editor-1.0.4-py3-none-any.whl\n","Collecting Mako\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f3/54/dbc07fbb20865d3b78fdb7cf7fa713e2cba4f87f71100074ef2dc9f9d1f7/Mako-1.1.4-py2.py3-none-any.whl (75kB)\n","\u001b[K     |████████████████████████████████| 81kB 11.5MB/s \n","\u001b[?25hRequirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from alembic->optuna==2.3.0) (2.8.1)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->optuna==2.3.0) (2.4.7)\n","Requirement already satisfied: PrettyTable>=0.7.2 in /usr/local/lib/python3.7/dist-packages (from cliff->optuna==2.3.0) (2.1.0)\n","Collecting pbr!=2.1.0,>=2.0.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/fb/48/69046506f6ac61c1eaa9a0d42d22d54673b69e176d30ca98e3f61513e980/pbr-5.5.1-py2.py3-none-any.whl (106kB)\n","\u001b[K     |████████████████████████████████| 112kB 56.1MB/s \n","\u001b[?25hRequirement already satisfied: PyYAML>=3.12 in /usr/local/lib/python3.7/dist-packages (from cliff->optuna==2.3.0) (3.13)\n","Collecting stevedore>=2.0.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d4/49/b602307aeac3df3384ff1fcd05da9c0376c622a6c48bb5325f28ab165b57/stevedore-3.3.0-py3-none-any.whl (49kB)\n","\u001b[K     |████████████████████████████████| 51kB 7.6MB/s \n","\u001b[?25hCollecting cmd2>=1.0.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/15/8b/15061b32332bb35ea2a2f6263d0f616779d576e82739ec8e7fcf3c94abf5/cmd2-1.5.0-py3-none-any.whl (133kB)\n","\u001b[K     |████████████████████████████████| 143kB 52.0MB/s \n","\u001b[?25hRequirement already satisfied: greenlet!=0.4.17; python_version >= \"3\" in /usr/local/lib/python3.7/dist-packages (from sqlalchemy>=1.1.0->optuna==2.3.0) (1.0.0)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from sqlalchemy>=1.1.0->optuna==2.3.0) (3.10.1)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.7/dist-packages (from Mako->alembic->optuna==2.3.0) (1.1.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil->alembic->optuna==2.3.0) (1.15.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from PrettyTable>=0.7.2->cliff->optuna==2.3.0) (0.2.5)\n","Collecting colorama>=0.3.7\n","  Downloading https://files.pythonhosted.org/packages/44/98/5b86278fbbf250d239ae0ecb724f8572af1c91f4a11edf4d36a206189440/colorama-0.4.4-py2.py3-none-any.whl\n","Collecting pyperclip>=1.6\n","  Downloading https://files.pythonhosted.org/packages/a7/2c/4c64579f847bd5d539803c8b909e54ba087a79d01bb3aba433a95879a6c5/pyperclip-1.8.2.tar.gz\n","Requirement already satisfied: attrs>=16.3.0 in /usr/local/lib/python3.7/dist-packages (from cmd2>=1.0.0->cliff->optuna==2.3.0) (20.3.0)\n","Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->sqlalchemy>=1.1.0->optuna==2.3.0) (3.7.4.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->sqlalchemy>=1.1.0->optuna==2.3.0) (3.4.1)\n","Building wheels for collected packages: optuna\n","  Building wheel for optuna (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for optuna: filename=optuna-2.3.0-cp37-none-any.whl size=359761 sha256=2439e5b21c33152d75442f48a58961e4c84a5a373fb1d824b746b1c161c08ed6\n","  Stored in directory: /root/.cache/pip/wheels/fa/91/19/64b0ec6b964f89c0695a9dc6db6f851d0b54c5381a5c9cadfb\n","Successfully built optuna\n","Building wheels for collected packages: pyperclip\n","  Building wheel for pyperclip (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyperclip: filename=pyperclip-1.8.2-cp37-none-any.whl size=11107 sha256=1061480480b07cdf783a1c99ce09490f226c17ea079d2fa47629f96f8cd6f2db\n","  Stored in directory: /root/.cache/pip/wheels/25/af/b8/3407109267803f4015e1ee2ff23be0c8c19ce4008665931ee1\n","Successfully built pyperclip\n","Installing collected packages: python-editor, Mako, alembic, pbr, stevedore, colorama, pyperclip, cmd2, cliff, colorlog, cmaes, optuna\n","Successfully installed Mako-1.1.4 alembic-1.5.8 cliff-3.7.0 cmaes-0.8.2 cmd2-1.5.0 colorama-0.4.4 colorlog-5.0.1 optuna-2.3.0 pbr-5.5.1 pyperclip-1.8.2 python-editor-1.0.4 stevedore-3.3.0\n","Collecting transformers==4.2.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/cd/40/866cbfac4601e0f74c7303d533a9c5d4a53858bd402e08e3e294dd271f25/transformers-4.2.1-py3-none-any.whl (1.8MB)\n","\u001b[K     |████████████████████████████████| 1.8MB 16.7MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from transformers==4.2.1) (1.19.5)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers==4.2.1) (2019.12.20)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers==4.2.1) (2.23.0)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers==4.2.1) (3.10.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers==4.2.1) (3.0.12)\n","Collecting sacremoses\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/75/ee/67241dc87f266093c533a2d4d3d69438e57d7a90abb216fa076e7d475d4a/sacremoses-0.0.45-py3-none-any.whl (895kB)\n","\u001b[K     |████████████████████████████████| 901kB 48.6MB/s \n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers==4.2.1) (4.41.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers==4.2.1) (20.9)\n","Collecting tokenizers==0.9.4\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/fb/36/59e4a62254c5fcb43894c6b0e9403ec6f4238cc2422a003ed2e6279a1784/tokenizers-0.9.4-cp37-cp37m-manylinux2010_x86_64.whl (2.9MB)\n","\u001b[K     |████████████████████████████████| 2.9MB 54.3MB/s \n","\u001b[?25hRequirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.2.1) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.2.1) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.2.1) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.2.1) (3.0.4)\n","Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers==4.2.1) (3.7.4.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers==4.2.1) (3.4.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.2.1) (1.0.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.2.1) (1.15.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.2.1) (7.1.2)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers==4.2.1) (2.4.7)\n","Installing collected packages: sacremoses, tokenizers, transformers\n","Successfully installed sacremoses-0.0.45 tokenizers-0.9.4 transformers-4.2.1\n","Cloning into 'multi-dialect-bert-base-arabic'...\n","remote: Enumerating objects: 15, done.\u001b[K\n","remote: Counting objects: 100% (15/15), done.\u001b[K\n","remote: Compressing objects: 100% (14/14), done.\u001b[K\n","remote: Total 15 (delta 3), reused 0 (delta 0)\n","Unpacking objects: 100% (15/15), done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"krBvefg6l6vv"},"source":["!mkdir data\n","!mkdir train"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TVay9KamnC3I"},"source":["#Creating training datasets"]},{"cell_type":"code","metadata":{"id":"hr84ozGinCFh"},"source":["import pandas as pd\n","import numpy as np\n","import re\n","\n","from tqdm import tqdm_notebook as tqdm\n","from sklearn.model_selection import train_test_split\n","all_datasets= []"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8PhWP2JzrEci"},"source":["class Dataset:\n","    def __init__(\n","        self,\n","        name,\n","        train,\n","        valid,\n","        test,\n","        label_list,\n","        # label_list_valid,\n","        # label_list_test\n","    ):\n","        self.name = name\n","        self.train = train\n","        self.valid = valid\n","        self.test = test\n","        self.label_list = label_list\n","        # self.label_list_valid = label_list_valid\n","        # self.label_list_test = label_list_test"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"joWPYWGMqLau"},"source":["##Semeval Dataset "]},{"cell_type":"code","metadata":{"id":"lt_lGy85zuca"},"source":["text_cleaning_re = \"[a-zA-Z]|\\d+|[٠١٢٣٤٥٦٧٨٩]|[.#،<>:@,\\\\-_”“٪ًَ]\"\n","def preprocess(text):\n","  # search = [\"أ\",\"إ\",\"آ\",\"ة\",\"_\",\"-\",\"/\",\".\",\"،\",\" و \",\" يا \",'\"',\"ـ\",\"'\",\"ى\",\"\\\\\",'\\n', '\\t','&quot;','?','؟','!','#']\n","  # replace = [\"ا\",\"ا\",\"ا\",\"ه\",\" \",\" \",\"\",\"\",\"\",\" و\",\" يا\",\"\",\"\",\"\",\"ي\",\"\",' ', ' ',' ',' ? ',' ؟ ',' ! ',' ']\n","  #remove tashkeel\n","  p_tashkeel = re.compile(r'[\\u0617-\\u061A\\u064B-\\u0652]')\n","  text = re.sub(p_tashkeel,\"\", str(text))\n","  # text = text.replace('وو', 'و')\n","  # text = text.replace('يي', 'ي')\n","  # text = text.replace('اا', 'ا')\n","  text = re.sub(text_cleaning_re, ' ', str(text).lower()).strip()\n","  #remove longation\n","  text = re.sub(r'(.)\\1+', r'\\1\\1', str(text)) \n","  text = re.sub(\"[إأآا]\", \"ا\", str(text))\n","  text = re.sub(\"ى\", \"ي\", str(text))\n","  # text = re.sub(\"ؤ\", \"ء\", text)\n","  # text = re.sub(\"ئ\", \"ء\", text)\n","  text = re.sub(\"ة\", \"ه\", str(text))\n","  # for i in range(0, len(search)):\n","  #       text = text.replace(search[i], replace[i])\n","  \n","   #trim    \n","  # text = text.strip()\n","\n","  tokens = []\n","  for token in text.split():\n","    # if token not in stop_words:\n","      tokens.append(token)\n","  return \" \".join(tokens)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-6oL3qkXmOgJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619192260765,"user_tz":-180,"elapsed":5157,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"db7d3ebf-fd7a-4e34-b696-236d9c754fbb"},"source":["#load dataset\n","df_train = pd.read_excel(\"/content/drive/MyDrive/Master thesis/DataSet-forUsing/semeval2020/train.xlsx\")\n","df_valid = pd.read_excel('/content/drive/MyDrive/Master thesis/DataSet-forUsing/semeval2020/dev.xlsx')\n","df_test_tweets = pd.read_excel('/content/drive/MyDrive/Master thesis/DataSet-forUsing/semeval2020/test.xlsx')\n","df_test_labels = pd.read_excel('/content/drive/MyDrive/Master thesis/DataSet-forUsing/semeval2020/testLabels.xlsx')\n","\n","#Rename Columns\n","df_train = df_train.rename(columns={'off': 'OFF_Labels','hs': 'HS_Labels'})\n","df_valid = df_valid.rename(columns={'off': 'OFF_Labels','hs': 'HS_Labels'})\n","df_test_labels=df_test_labels.rename(columns={'label':'HS_Labels'})\n","\n","df_test=pd.concat([df_test_tweets, df_test_labels], axis=1)\n","\n","#drop any row have null values\n","df_train=df_train.dropna(how='any',axis=0)\n","df_valid=df_valid.dropna(how='any',axis=0)\n","df_train.drop(columns=['OFF_Labels'])\n","df_valid.drop(columns=['OFF_Labels'])\n","df_test.drop(columns=['id'])\n","# df_train[\"tweets\"] = df_train[\"tweets\"].apply(lambda x : preprocess(x))\n","# df_train[\"HS_Labels\"] = df_train[\"HS_Labels\"].apply(lambda x : x.replace(\"NOT_HS\", '0'))\n","# df_train[\"HS_Labels\"] = df_train[\"HS_Labels\"].apply(lambda x : x.replace(\"HS\", '1'))\n","\n","\n","# df_valid[\"tweets\"] = df_valid[\"tweets\"].apply(lambda x : preprocess(x))\n","# df_valid[\"HS_Labels\"] = df_valid[\"HS_Labels\"].apply(lambda x : x.replace(\"NOT_HS\", '0'))\n","# df_valid[\"HS_Labels\"] = df_valid[\"HS_Labels\"].apply(lambda x : x.replace(\"HS\", '1'))\n","\n","# df_test[\"tweets\"] = df_test[\"tweets\"].apply(lambda x : preprocess(x))\n","\n","# print(df_train)\n","# ----------------------------------------------------------------- #\n","DATA_COLUMN = \"tweets\"\n","LABEL_COLUMN = \"HS_Labels\"\n","\n","# ----------------------------------------------------------------- #\n","\n","# x_train = df_train\n","# x_val = df_valid\n","# x_test = df_test\n","\n","# ----------------------------------------------------------------- #\n","\n","# x_train_w_eval = pd.concat([x_train, x_val], axis=0)\n","\n","# ----------------------------------------------------------------- #\n","\n","# x_train_w_eval.shape\n","\n","\n","df_train = df_train[['tweets','HS_Labels']]\n","df_valid = df_valid[['tweets','HS_Labels']]\n","df_test = df_test[['tweets','HS_Labels']]\n","df_train.columns = [DATA_COLUMN, LABEL_COLUMN]\n","df_valid.columns = [DATA_COLUMN, LABEL_COLUMN]\n","df_test.columns = [DATA_COLUMN,LABEL_COLUMN]\n","# df_test_labels.columns = [LABEL_COLUMN]\n","print(df_train[LABEL_COLUMN].value_counts())\n","print(df_valid[LABEL_COLUMN].value_counts())\n","print(df_test[LABEL_COLUMN].value_counts())\n","\n","\n","# label_map = {\n","#     'HS' : 0,\n","#     'NOT_HS' : 1\n","# }\n","\n","# df_AJGT[DATA_COLUMN] = df_AJGT[DATA_COLUMN].apply(lambda x: preprocess(x, do_farasa_tokenization=True , farasa=farasa_segmenter, use_farasapy = True))\n","# df_train[LABEL_COLUMN] = df_train[LABEL_COLUMN].apply(lambda x: label_map[x])\n","# df_valid[LABEL_COLUMN] = df_valid[LABEL_COLUMN].apply(lambda x: label_map[x])\n","# df_test_labels[LABEL_COLUMN] = df_test_labels[LABEL_COLUMN].apply(lambda x: label_map[x])\n","\n","# print(df_train[LABEL_COLUMN])\n","# print(df_valid[LABEL_COLUMN])\n","# label_list_ArSenTD_train = list(df_train[LABEL_COLUMN].unique())\n","# label_list_ArSenTD_valid = list(df_valid[LABEL_COLUMN].unique())\n","# label_list_ArSenTD_test = list(df_test_labels[LABEL_COLUMN].unique())\n","\n","label_list_semeval = ['HS','NOT_HS']\n","data_semeval = Dataset(\"Data-semeval\", df_train, df_valid,df_test,label_list_semeval)\n","all_datasets.append(data_semeval)\n","\n","# ----------------------------------------------------------------- #\n","\n","\n","# df_train = df_train[\"tweets\"]\n","# df_valid = df_valid[\"tweets\"]  \n","# df_test = df_test[\"tweets\"]  \n","\n","\n","# df_ArSenTD = pd.read_csv(\n","#     \"/content/drive/My Drive/Datasets/ArSenTD-LEV/ArSenTD-LEV.tsv\", sep=\"\\t\", header=0\n","# )\n","\n","# df_ArSenTD = df_ArSenTD[['Tweet','Sentiment']]\n","\n","# df_ArSenTD.columns = [DATA_COLUMN, LABEL_COLUMN]\n","\n","# print(df_ArSenTD[LABEL_COLUMN].value_counts())\n","# label_list_ArSenTD = list(df_ArSenTD[LABEL_COLUMN].unique())\n","\n","# train_ArSenTD, test_ArSenTD = train_test_split(\n","#     df_ArSenTD, test_size=0.2, random_state=42\n","# )\n","\n","# data_ArSenTD = Dataset(\"ArSenTD-LEV\", train_ArSenTD, test_ArSenTD, label_list_ArSenTD)\n","# all_datasets.append(data_ArSenTD)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["NOT_HS    6623\n","HS         361\n","Name: HS_Labels, dtype: int64\n","NOT_HS    956\n","HS         44\n","Name: HS_Labels, dtype: int64\n","NOT_HS    1899\n","HS         101\n","Name: HS_Labels, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-WYy5ikAs7l3","colab":{"base_uri":"https://localhost:8080/","height":568,"output_embedded_package_id":"1XbfjEvdjFEAHnFODzMFwWmxRaVreetKM"},"executionInfo":{"status":"ok","timestamp":1619192270308,"user_tz":-180,"elapsed":3433,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"e39625bf-61d2-448a-e0e8-54e5f4fa348c"},"sourceload_ext google.colab.data_table\n","df_train"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"lI2kEqe50_s4"},"source":["# train_sentence_length = [ len(text.split()) for text in df_train['tweets']]\n","# valid_sentence_length = [ len(text.split()) for text in df_valid['tweets']]\n","# test_sentence_length = [ len(text.split()) for text in df_test['tweets']]\n","\n","# print(\"Max of train len: \",np.max(train_sentence_length))\n","# print(\"Max of test len: \",np.max(valid_sentence_length))\n","# print(\"Max of test len: \",np.max(test_sentence_length))\n","# import matplotlib.pyplot as plt\n","\n","# plt.hist(train_sentence_length,bins= range(200),density=True)\n","# plt.hist(valid_sentence_length,bins= range(200),density=True)\n","# plt.hist(test_sentence_length,bins= range(200),density=True)\n","# plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Bcwdslw7v0Q8"},"source":["#Trainer"]},{"cell_type":"code","metadata":{"id":"HUn2RB6Bvrxj"},"source":["from transformers import AutoTokenizer, AutoModelForMaskedLM,BertForSequenceClassification,AutoModel\n","import numpy as np\n","from sklearn.metrics import classification_report, accuracy_score, f1_score, confusion_matrix, precision_score , recall_score\n","\n","from transformers import AutoConfig, AutoModelForSequenceClassification, AutoTokenizer, BertTokenizer\n","from transformers.data.processors import SingleSentenceClassificationProcessor\n","from transformers import Trainer , TrainingArguments\n","from transformers.trainer_utils import EvaluationStrategy\n","from transformers.data.processors.utils import InputFeatures\n","from torch.utils.data import Dataset\n","from torch.utils.data import DataLoader\n","from sklearn.utils import resample\n","import logging\n","import torch\n","import optuna \n","# from arabert.preprocess_arabert import preprocess, never_split_tokens\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KfNKr05tv7cA"},"source":["logging.basicConfig(level=logging.WARNING)\n","logger = logging.getLogger(__name__)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R4SGYoB2EDJD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619192271808,"user_tz":-180,"elapsed":4899,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"1b45bc45-3135-4d75-dc33-d17c0033e150"},"source":["for x in all_datasets:\n","  print(x.name)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Data-semeval\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"62Lma6tT5zJi"},"source":["You can choose which model, and dataset from here along with the max sentence length"]},{"cell_type":"code","metadata":{"id":"vzeVFoz1wDYf"},"source":["dataset_name = 'Data-semeval'\n","# model_name = 'qarib/bert-base-qarib'\n","# https://huggingface.co/UBC-NLP/MARBERT\n","model_name = 'bashar-talafha/multi-dialect-bert-base-arabic'\n","task_name = 'classification'\n","# num_labels = 2\n","max_len = 256\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tcbD2PCiX4vw","executionInfo":{"status":"ok","timestamp":1619192271809,"user_tz":-180,"elapsed":4892,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"aca8687f-7d77-4228-b565-fad155fcf609"},"source":["for d in all_datasets:\n","  if d.name==dataset_name:\n","    selected_dataset = d\n","    print('Dataset found \\n',dataset_name)\n","    break"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Dataset found \n"," Data-semeval\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PoyaRIGYCEzh"},"source":["# arabert_prep = ArabertPreprocessor(model_name.split(\"/\")[-1])\n","\n","selected_dataset.train[DATA_COLUMN] = selected_dataset.train[DATA_COLUMN].apply(lambda x:   preprocess(x))\n","selected_dataset.valid[DATA_COLUMN] = selected_dataset.valid[DATA_COLUMN].apply(lambda x:   preprocess(x))\n","selected_dataset.test[DATA_COLUMN] = selected_dataset.test[DATA_COLUMN].apply(lambda x:  preprocess(x))  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WE_MmGDceJxj","executionInfo":{"status":"ok","timestamp":1619192272359,"user_tz":-180,"elapsed":5427,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"6377118c-8213-4b68-eac1-e4fe81377ec8"},"source":["selected_dataset.train[DATA_COLUMN]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       الحمدلله يارب فوز مهم يا زمالك كل الدعم ليكم ي...\n","1                 فدوه يا بخت فدوه يا زمن واحد منكم يجيبه\n","2       يا رب يا واحد يا احد بحق يوم الاحد ان تهلك بني...\n","3       هوا الحريه يا وجع قلبي عليكي يا امي الله لا يح...\n","4               يا بكون بحياتك الاهم يا اما ما بدي اكون 🎼\n","                              ...                        \n","6995    يا حمار يا جاهل نسبه الباطل ما بتتحسبش و عاملي...\n","6996    كل زق يا طاقيه يا واطي يا حقير يا تافه يا سافل...\n","6997    يا كبير يا ممتع يا نجم لابد ان تعي جيدا اننا م...\n","6998            يا رب الاتحاد يفوز يا رب 😭😭 الاتحاد النصر\n","6999    يعز عليا ادخل الشارع وملاقيكش واقف مستنيني في ...\n","Name: tweets, Length: 6984, dtype: object"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"4YS7XI2bZTyz"},"source":["class BERTDataset(Dataset):\n","    def __init__(self, text, target, model_name, max_len, label_map):\n","      super(BERTDataset).__init__()\n","      self.text = text\n","      self.target = target\n","      self.tokenizer_name = model_name\n","      self.tokenizer = AutoTokenizer.from_pretrained(model_name)\n","      self.max_len = max_len\n","      self.label_map = label_map\n","      \n","\n","    def __len__(self):\n","      return len(self.text)\n","\n","    def __getitem__(self,item):\n","      text = str(self.text[item])\n","      text = \" \".join(text.split())\n","\n","\n","        \n","      input_ids = self.tokenizer.encode(\n","          text,\n","          add_special_tokens=True,\n","          max_length=self.max_len,\n","          truncation='longest_first'\n","      )     \n","    \n","      attention_mask = [1] * len(input_ids)\n","\n","      # Zero-pad up to the sequence length.\n","      padding_length = self.max_len - len(input_ids)\n","      input_ids = input_ids + ([self.tokenizer.pad_token_id] * padding_length)\n","      attention_mask = attention_mask + ([0] * padding_length)    \n","      \n","      return InputFeatures(input_ids=input_ids, attention_mask=attention_mask, label=self.label_map[self.target[item]])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mciZOFz-amkV","colab":{"base_uri":"https://localhost:8080/","height":134,"referenced_widgets":["6dff160e574949b689479d16f876a27d","8322f40a098847428e07cc48d0d37e5c","480e37fe9de1439db177749d1a6f16ba","648a57577d2543b58d27cd56d9f086d9","94694e07fa824f4087c234b073e2a5fd","a421820457f84264b5576bfcb0018f27","f2eeb89f1b004fb49880be2d35f519aa","a493361df81e4e75b89fcc7622b4f5db","e6643cfb93c24280981427747e5fa247","f1a7d72cdf32402698293446806fbe8c","07fd43467251411fbe5d00ba4086b5fc","cf23358cc0b74320a411d5eaab85ae31","019403338d984fb9a0fc683cc242cd85","453823edb60a4c93a585a8b56ddb3e6f","3dcfc4f5e68c41959fff8090891cf341","f2e6ccc916cd4645a82f1a42c07117c9"]},"executionInfo":{"status":"ok","timestamp":1619192272839,"user_tz":-180,"elapsed":5898,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"e977edb1-7287-4746-9c35-7801b0911204"},"source":["label_map = { v:index for index, v in enumerate(selected_dataset.label_list) }\n","print(label_map)\n","# label_map_test = { v:index for index, v in enumerate(df_test_labels.HS_Labels) }\n","# print(label_map_test)\n","# label_map_valid = { v:index for index, v in enumerate(df_valid.HS_Labels) }\n","# print(label_map_valid)\n","# train_dataset = BERTDataset(selected_dataset.train[DATA_COLUMN].to_list(),selected_dataset.train[LABEL_COLUMN].to_list(),model_name,max_len,label_map)\n","# test_dataset = BERTDataset(selected_dataset.test[DATA_COLUMN].to_list(),selected_dataset.test[LABEL_COLUMN].to_list(),model_name,max_len,label_map)\n","\n","train_dataset = BERTDataset(selected_dataset.train[DATA_COLUMN].to_list(),selected_dataset.train[LABEL_COLUMN].to_list(),model_name,max_len,label_map)\n","valid_dataset = BERTDataset(selected_dataset.valid[DATA_COLUMN].to_list(),selected_dataset.valid[LABEL_COLUMN].to_list(),model_name,max_len,label_map)\n","test_dataset = BERTDataset(selected_dataset.test[DATA_COLUMN].to_list(),selected_dataset.test[LABEL_COLUMN].to_list(),model_name,max_len,label_map)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'HS': 0, 'NOT_HS': 1}\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6dff160e574949b689479d16f876a27d","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=456.0, style=ProgressStyle(description_…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e6643cfb93c24280981427747e5fa247","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=334032.0, style=ProgressStyle(descripti…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lt7l0IxjbmNu"},"source":["def model_init():\n","    return AutoModelForSequenceClassification.from_pretrained(model_name, return_dict=True, num_labels=len(label_map))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UYU6G4vWc5nz"},"source":["def compute_metrics(p): #p should be of type EvalPrediction\n","  preds = np.argmax(p.predictions, axis=1)\n","  assert len(preds) == len(p.label_ids)\n","  print(classification_report(p.label_ids,preds))\n","  print(confusion_matrix(p.label_ids,preds))\n","\n","  macro_f1_pos_neg = f1_score(p.label_ids,preds,average='macro',labels=[0,1])\n","  macro_f1 = f1_score(p.label_ids,preds,average='macro')\n","  macro_precision = precision_score(p.label_ids,preds,average='macro')\n","  macro_recall = recall_score(p.label_ids,preds,average='macro')\n","  acc = accuracy_score(p.label_ids,preds)\n","  return {\n","      'macro_f1' : macro_f1,\n","      'macro_f1_pos_neg' : macro_f1_pos_neg,  \n","      'macro_precision': macro_precision,\n","      'macro_recall': macro_recall,\n","      'accuracy': acc\n","  }"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GnqiZOT37ByE"},"source":["# HyperParameter Search"]},{"cell_type":"markdown","metadata":{"id":"bJif-78C6Kmn"},"source":["you can change the batch size and gradient accumulation from here\n","\n"]},{"cell_type":"code","metadata":{"id":"L3Z_kPB-dE_w"},"source":["training_args = TrainingArguments(\"./train\")\n","training_args.evaluate_during_training = True\n","training_args.adam_epsilon = 1e-8\n","training_args.lr_scheduler_type = 'cosine'\n","training_args.fp16 = True\n","training_args.per_device_train_batch_size = 16\n","training_args.per_device_eval_batch_size = 16\n","training_args.gradient_accumulation_steps = 2\n","training_args.num_train_epochs= 8\n","training_args.evaluation_strategy = EvaluationStrategy.EPOCH\n","# training_args.logging_steps = 200\n","training_args.save_steps = 100000\n","# training_args.save_steps = \n","#training_args.eval_steps = \n","training_args.disable_tqdm = True\n","# print(\"Logging Step:\", training_args.logging_steps)\n","# print(\"Eval Step:\",training_args.eval_steps)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KeqRACPYheeb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619192272841,"user_tz":-180,"elapsed":5884,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"bd793bb7-90a9-4d21-ab96-3ead36d11308"},"source":["steps_per_epoch = (len(selected_dataset.train)// (training_args.per_device_train_batch_size * training_args.gradient_accumulation_steps))\n","total_steps = steps_per_epoch * training_args.num_train_epochs\n","print(steps_per_epoch)\n","print(total_steps)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["218\n","1744\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o8HOnY6odcwG","colab":{"base_uri":"https://localhost:8080/","height":175,"referenced_widgets":["eec06cc2fad24d3283932ae6b43a37b1","ebe4372ad07a413fad04b512aaf5ff71","3a763620db544324b656c6ec811da0be","e71ac9d717764c6dac1cec2bd99c2751","0bc5447dbe6e480d894d5e578bda0622","b192804f3fdf4b4f9790f7c7f7b5332d","99b058e6e3e64262b8faa2d1b09b42f6","14caea1602a84f789effdb9d4c13585c"]},"executionInfo":{"status":"ok","timestamp":1619192296738,"user_tz":-180,"elapsed":29777,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"86c1ff4e-0a67-4a10-da44-10c4f9ce3000"},"source":["trainer = Trainer(\n","    args=training_args,\n","    train_dataset=train_dataset, \n","    eval_dataset=valid_dataset, \n","    model_init=model_init,\n","    compute_metrics=compute_metrics,\n",")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"eec06cc2fad24d3283932ae6b43a37b1","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=445015160.0, style=ProgressStyle(descri…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"stream","text":["Some weights of the model checkpoint at bashar-talafha/multi-dialect-bert-base-arabic were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']\n","- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bashar-talafha/multi-dialect-bert-base-arabic and are newly initialized: ['classifier.weight', 'classifier.bias']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"AFZ94M7Rzkhh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619192296742,"user_tz":-180,"elapsed":29777,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"8275c150-abc9-4b29-e5dc-ce911a80f280"},"source":["def my_hp_space(trial):\n","    return {\n","        \"learning_rate\": trial.suggest_float(\"learning_rate\", 2e-5, 7e-5, step=1e-5),\n","        \"seed\": trial.suggest_categorical(\"seed\", [0, 1, 42, 666, 123, 12345]),\n","        \"warmup_steps\": trial.suggest_int(\"warmup_steps\",0,total_steps*0.1,step=total_steps*0.1*0.5)\n","    }\n","\n","search_space = {\n","    \"learning_rate\":  list(np.arange(2e-5, 7e-5, 1e-5)),\n","    \"seed\":  [0, 1, 42, 666, 123, 12345],\n","    \"warmup_steps\": list(range(0, int((total_steps)*0.1)+1, int(total_steps*0.1*0.5)))\n","}\n","search_space"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'learning_rate': [2e-05,\n","  3.0000000000000004e-05,\n","  4.000000000000001e-05,\n","  5.000000000000001e-05,\n","  6.000000000000001e-05],\n"," 'seed': [0, 1, 42, 666, 123, 12345],\n"," 'warmup_steps': [0, 87, 174]}"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"PgfU2UVzfS_A"},"source":["def my_objective(metrics):\n","    return metrics['eval_macro_f1']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nc4gOvtE66Mj"},"source":["choose a study name to save it on disk"]},{"cell_type":"code","metadata":{"id":"NSGLnBKv64sZ"},"source":["# name = \"qarib-semeval\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7l821sW7fdaY"},"source":["# best_run = trainer.hyperparameter_search(direction=\"maximize\",\n","#                                          hp_space=my_hp_space,\n","#                                          compute_objective=my_objective,\n","#                                          n_trials=None,\n","#                                          pruner=optuna.pruners.NopPruner(),\n","#                                          sampler=optuna.samplers.GridSampler(search_space),\n","#                                          study_name=name,\n","#                                          storage=\"sqlite:////content/drive/MyDrive/{}.db\".format(name),\n","#                                          load_if_exists=False # you can change this to true, for continuing the search\n","#                                          )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OVwfM9ZJf12t"},"source":["# best_run"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vTmvFEs41WkV"},"source":["#Regular Training"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kTLYpWADhZPq","executionInfo":{"status":"ok","timestamp":1619192296745,"user_tz":-180,"elapsed":29759,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"936b4ec9-692c-4bb9-ae70-e5e55c4c6890"},"source":["training_args = TrainingArguments(\"./train\")\n","training_args.evaluate_during_training = True\n","training_args.adam_epsilon = 1e-8\n","training_args.learning_rate = 5e-5\n","training_args.fp16 = True\n","training_args.per_device_train_batch_size = 16\n","training_args.per_device_eval_batch_size = 16\n","training_args.gradient_accumulation_steps = 2\n","training_args.num_train_epochs= 8\n","\n","\n","steps_per_epoch = (len(selected_dataset.train)// (training_args.per_device_train_batch_size * training_args.gradient_accumulation_steps))\n","total_steps = steps_per_epoch * training_args.num_train_epochs\n","print(steps_per_epoch)\n","print(total_steps)\n","#Warmup_ratio\n","warmup_ratio = 0.1\n","training_args.warmup_steps = total_steps*warmup_ratio # or you can set the warmup steps directly \n","\n","training_args.evaluation_strategy = EvaluationStrategy.EPOCH\n","# training_args.logging_steps = 200\n","training_args.save_steps = 100000 #don't want to save any model, there is probably a better way to do this :)\n","training_args.seed = 42\n","training_args.disable_tqdm = False\n","training_args.lr_scheduler_type = 'cosine'"],"execution_count":null,"outputs":[{"output_type":"stream","text":["218\n","1744\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"V_oGjIC-7Vow"},"source":["This paert allows you to do a regular training with no hyper parameter optimization"]},{"cell_type":"code","metadata":{"id":"Ro5BW5ak4uc1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619192299854,"user_tz":-180,"elapsed":32864,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"b8f15784-5f0c-4c1b-e57a-7b682cc6c225"},"source":["trainer = Trainer(\n","    model = model_init(),\n","    args = training_args,\n","    train_dataset = train_dataset,\n","    eval_dataset=valid_dataset,\n","    compute_metrics=compute_metrics,\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Some weights of the model checkpoint at bashar-talafha/multi-dialect-bert-base-arabic were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']\n","- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bashar-talafha/multi-dialect-bert-base-arabic and are newly initialized: ['classifier.weight', 'classifier.bias']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"yx336O3J2SdQ","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1619193293191,"user_tz":-180,"elapsed":1026198,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"2965b91a-d04f-42c9-94b5-168fbbf7bac6"},"source":["trainer.train()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","        </style>\n","      \n","      <progress value='1744' max='1744' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [1744/1744 16:32, Epoch 7/8]\n","    </div>\n","    <table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>Epoch</th>\n","      <th>Training Loss</th>\n","      <th>Validation Loss</th>\n","      <th>Macro F1</th>\n","      <th>Macro F1 Pos Neg</th>\n","      <th>Macro Precision</th>\n","      <th>Macro Recall</th>\n","      <th>Accuracy</th>\n","      <th>Runtime</th>\n","      <th>Samples Per Second</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>No log</td>\n","      <td>0.090620</td>\n","      <td>0.707904</td>\n","      <td>0.707904</td>\n","      <td>0.890498</td>\n","      <td>0.646158</td>\n","      <td>0.966000</td>\n","      <td>5.941900</td>\n","      <td>168.296000</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>No log</td>\n","      <td>0.121838</td>\n","      <td>0.765625</td>\n","      <td>0.765625</td>\n","      <td>0.794145</td>\n","      <td>0.742678</td>\n","      <td>0.964000</td>\n","      <td>6.127400</td>\n","      <td>163.201000</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.132000</td>\n","      <td>0.155850</td>\n","      <td>0.812702</td>\n","      <td>0.812702</td>\n","      <td>0.899912</td>\n","      <td>0.758749</td>\n","      <td>0.974000</td>\n","      <td>6.116300</td>\n","      <td>163.497000</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.132000</td>\n","      <td>0.162184</td>\n","      <td>0.809253</td>\n","      <td>0.809253</td>\n","      <td>0.832750</td>\n","      <td>0.789178</td>\n","      <td>0.970000</td>\n","      <td>6.126300</td>\n","      <td>163.230000</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.013700</td>\n","      <td>0.208461</td>\n","      <td>0.806308</td>\n","      <td>0.806308</td>\n","      <td>0.794205</td>\n","      <td>0.819608</td>\n","      <td>0.966000</td>\n","      <td>6.110900</td>\n","      <td>163.642000</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.013700</td>\n","      <td>0.204989</td>\n","      <td>0.817708</td>\n","      <td>0.817708</td>\n","      <td>0.851775</td>\n","      <td>0.790224</td>\n","      <td>0.972000</td>\n","      <td>6.119300</td>\n","      <td>163.418000</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.001300</td>\n","      <td>0.208446</td>\n","      <td>0.813432</td>\n","      <td>0.813432</td>\n","      <td>0.842006</td>\n","      <td>0.789701</td>\n","      <td>0.971000</td>\n","      <td>6.116400</td>\n","      <td>163.495000</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.001300</td>\n","      <td>0.208945</td>\n","      <td>0.813432</td>\n","      <td>0.813432</td>\n","      <td>0.842006</td>\n","      <td>0.789701</td>\n","      <td>0.971000</td>\n","      <td>6.122900</td>\n","      <td>163.322000</td>\n","    </tr>\n","  </tbody>\n","</table><p>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.81      0.30      0.43        44\n","           1       0.97      1.00      0.98       956\n","\n","    accuracy                           0.97      1000\n","   macro avg       0.89      0.65      0.71      1000\n","weighted avg       0.96      0.97      0.96      1000\n","\n","[[ 13  31]\n"," [  3 953]]\n","              precision    recall  f1-score   support\n","\n","           0       0.61      0.50      0.55        44\n","           1       0.98      0.99      0.98       956\n","\n","    accuracy                           0.96      1000\n","   macro avg       0.79      0.74      0.77      1000\n","weighted avg       0.96      0.96      0.96      1000\n","\n","[[ 22  22]\n"," [ 14 942]]\n","              precision    recall  f1-score   support\n","\n","           0       0.82      0.52      0.64        44\n","           1       0.98      0.99      0.99       956\n","\n","    accuracy                           0.97      1000\n","   macro avg       0.90      0.76      0.81      1000\n","weighted avg       0.97      0.97      0.97      1000\n","\n","[[ 23  21]\n"," [  5 951]]\n","              precision    recall  f1-score   support\n","\n","           0       0.68      0.59      0.63        44\n","           1       0.98      0.99      0.98       956\n","\n","    accuracy                           0.97      1000\n","   macro avg       0.83      0.79      0.81      1000\n","weighted avg       0.97      0.97      0.97      1000\n","\n","[[ 26  18]\n"," [ 12 944]]\n","              precision    recall  f1-score   support\n","\n","           0       0.60      0.66      0.63        44\n","           1       0.98      0.98      0.98       956\n","\n","    accuracy                           0.97      1000\n","   macro avg       0.79      0.82      0.81      1000\n","weighted avg       0.97      0.97      0.97      1000\n","\n","[[ 29  15]\n"," [ 19 937]]\n","              precision    recall  f1-score   support\n","\n","           0       0.72      0.59      0.65        44\n","           1       0.98      0.99      0.99       956\n","\n","    accuracy                           0.97      1000\n","   macro avg       0.85      0.79      0.82      1000\n","weighted avg       0.97      0.97      0.97      1000\n","\n","[[ 26  18]\n"," [ 10 946]]\n","              precision    recall  f1-score   support\n","\n","           0       0.70      0.59      0.64        44\n","           1       0.98      0.99      0.98       956\n","\n","    accuracy                           0.97      1000\n","   macro avg       0.84      0.79      0.81      1000\n","weighted avg       0.97      0.97      0.97      1000\n","\n","[[ 26  18]\n"," [ 11 945]]\n","              precision    recall  f1-score   support\n","\n","           0       0.70      0.59      0.64        44\n","           1       0.98      0.99      0.98       956\n","\n","    accuracy                           0.97      1000\n","   macro avg       0.84      0.79      0.81      1000\n","weighted avg       0.97      0.97      0.97      1000\n","\n","[[ 26  18]\n"," [ 11 945]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["TrainOutput(global_step=1744, training_loss=0.042137134554283265, metrics={'train_runtime': 993.2496, 'train_samples_per_second': 1.756, 'total_flos': 9491885912137728, 'epoch': 8.0})"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"agqaiJStrc_w","colab":{"base_uri":"https://localhost:8080/","height":392},"executionInfo":{"status":"ok","timestamp":1619193305646,"user_tz":-180,"elapsed":1038649,"user":{"displayName":"salam thabit","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0cMvIp1hk0qzr3By0zUCW2LL_Ph1mCJDW10TRJTU=s64","userId":"10444042167236672835"}},"outputId":"48d2b86f-1199-4399-e2e0-8b294a14e0e7"},"source":["trainer.evaluate(test_dataset)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","        </style>\n","      \n","      <progress value='125' max='125' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [125/125 00:12]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.79      0.60      0.69       101\n","           1       0.98      0.99      0.99      1899\n","\n","    accuracy                           0.97      2000\n","   macro avg       0.89      0.80      0.84      2000\n","weighted avg       0.97      0.97      0.97      2000\n","\n","[[  61   40]\n"," [  16 1883]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'epoch': 8.0,\n"," 'eval_accuracy': 0.972,\n"," 'eval_loss': 0.21628890931606293,\n"," 'eval_macro_f1': 0.8353706218874759,\n"," 'eval_macro_f1_pos_neg': 0.8353706218874759,\n"," 'eval_macro_precision': 0.8857034800872554,\n"," 'eval_macro_recall': 0.7977674544705655,\n"," 'eval_runtime': 12.2258,\n"," 'eval_samples_per_second': 163.589}"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"RrmCpsROvS-z"},"source":["# df_test_labels.columns = [LABEL_COLUMN]\n","# test_dataset = BERTDataset(selected_dataset.test[DATA_COLUMN].to_list(),selected_dataset.df_test_labels[LABEL_COLUMN].to_list(),model_name,max_len,label_map)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Seyz8Yaj2ZCK"},"source":["trainer.save_model(\"QARIB MODEL\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xd1iuK-UFjEV"},"source":[""],"execution_count":null,"outputs":[]}]}